open import Agda.Primitive
open import Data.Product
open import Prelude
open import category
import morphisms

module pullbacks {n m : Level} (ùíû : Category n m) where
  open Category ùíû
  open morphisms ùíû

  record PullingBack {C A B : Obj} (f : Hom A C) (g : Hom B C) : Set (n ‚äî m) where
    field
      P : Obj
      f' : Hom P B
      g' : Hom P A
      comm : f ‚àò g' ‚â° g ‚àò f'

  record PullingBackReduction {C A B : Obj} {f : Hom A C} {g : Hom B C} (pb‚ÇÇ : PullingBack f g) (pb : PullingBack f g) : Set m where
    open PullingBack pb
    open PullingBack pb‚ÇÇ renaming (P to P‚ÇÇ ; f' to f‚ÇÇ' ; g' to g‚ÇÇ')
    field
      u : Hom P‚ÇÇ P
      ev‚ÇÅ : f' ‚àò u ‚â° f‚ÇÇ'
      ev‚ÇÇ : g' ‚àò u ‚â° g‚ÇÇ'

  composePullingBackReductions : {C A B : Obj} {f : Hom A C} {g : Hom B C} {p q r : PullingBack f g} -> PullingBackReduction q r -> PullingBackReduction p q -> PullingBackReduction p r
  composePullingBackReductions qr pq =
    record
      { u = u_qr ‚àò u_pq
      ; ev‚ÇÅ = flipEq assoc =>>= ((_‚àò u_pq) $= ev_qr‚ÇÅ) =>>= ev_pq‚ÇÅ
      ; ev‚ÇÇ = flipEq assoc =>>= ((_‚àò u_pq) $= ev_qr‚ÇÇ) =>>= ev_pq‚ÇÇ
      }
    where
      open PullingBackReduction qr renaming (u to u_qr ; ev‚ÇÅ to ev_qr‚ÇÅ ; ev‚ÇÇ to ev_qr‚ÇÇ)
      open PullingBackReduction pq renaming (u to u_pq ; ev‚ÇÅ to ev_pq‚ÇÅ ; ev‚ÇÇ to ev_pq‚ÇÇ)

  identityPullingBackReduction : {C A B : Obj} {f : Hom A C} {g : Hom B C} (pb : PullingBack f g) -> PullingBackReduction pb pb
  identityPullingBackReduction pb = record { u = id ; ev‚ÇÅ = right_id ; ev‚ÇÇ = right_id }

  record UniquePullingBackReduction {C A B : Obj} {f : Hom A C} {g : Hom B C} (pb‚ÇÇ : PullingBack f g) (pb : PullingBack f g) : Set m where
    field
      reduction : PullingBackReduction pb‚ÇÇ pb
      unique : (red‚ÇÇ : PullingBackReduction pb‚ÇÇ pb) -> PullingBackReduction.u red‚ÇÇ ‚â° PullingBackReduction.u reduction
      
    u = PullingBackReduction.u reduction
    ev‚ÇÅ = PullingBackReduction.ev‚ÇÅ reduction
    ev‚ÇÇ = PullingBackReduction.ev‚ÇÅ reduction

  --
  --      f‚ÇÅ
  --    A -> B
  --  f‚ÇÇ|    |g‚ÇÅ
  --    v    v
  --    C -> D
  --      g‚ÇÇ
  --
  record CommutingSquare {A B C D : Obj} (f‚ÇÅ : Hom A B) (g‚ÇÅ : Hom B D) (f‚ÇÇ : Hom A C) (g‚ÇÇ : Hom C D) : Set m where
    constructor commutingSquare
    field
      evidence : g‚ÇÅ ‚àò f‚ÇÅ ‚â° g‚ÇÇ ‚àò f‚ÇÇ

  --        g‚ÇÇ
  --   P‚ÇÇ ------‚ïÆ
  --   | ‚Üòu  g‚ÇÅ v
  --   |  P‚ÇÅ -> A
  -- f‚ÇÇ| f‚ÇÅ|    |f
  --   |   v    v
  --   ‚ï∞-> B -> C
  --         g
  record PullbackSquareReduction {P‚ÇÅ P‚ÇÇ A B C : Obj}{f : Hom A C}{g : Hom B C}{f‚ÇÇ : Hom P‚ÇÇ B}{g‚ÇÇ : Hom P‚ÇÇ A}{f‚ÇÅ : Hom P‚ÇÅ B}{g‚ÇÅ : Hom P‚ÇÅ A}
                                 (sq‚ÇÇ : CommutingSquare g‚ÇÇ f f‚ÇÇ g) (sq‚ÇÅ : CommutingSquare g‚ÇÅ f f‚ÇÅ g) : Set m where
    field
      u : Hom P‚ÇÇ P‚ÇÅ
      ev‚ÇÅ : g‚ÇÇ ‚â° g‚ÇÅ ‚àò u
      ev‚ÇÇ : f‚ÇÇ ‚â° f‚ÇÅ ‚àò u

  record UniquePullbackSquareReduction {P‚ÇÅ P‚ÇÇ A B C : Obj}{f : Hom A C}{g : Hom B C}{f‚ÇÇ : Hom P‚ÇÇ B}{g‚ÇÇ : Hom P‚ÇÇ A}{f‚ÇÅ : Hom P‚ÇÅ B}{g‚ÇÅ : Hom P‚ÇÅ A}
                                       (sq‚ÇÇ : CommutingSquare g‚ÇÇ f f‚ÇÇ g) (sq‚ÇÅ : CommutingSquare g‚ÇÅ f f‚ÇÅ g) : Set m where
    field
      reduction : PullbackSquareReduction sq‚ÇÇ sq‚ÇÅ
      unique : (red : PullbackSquareReduction sq‚ÇÇ sq‚ÇÅ) -> PullbackSquareReduction.u red ‚â° PullbackSquareReduction.u reduction

    u   = PullbackSquareReduction.u   reduction
    ev‚ÇÅ = PullbackSquareReduction.ev‚ÇÅ reduction
    ev‚ÇÇ = PullbackSquareReduction.ev‚ÇÇ reduction

  record Pullback {P A B C : Obj} (f : Hom A C) (g : Hom B C) (f' : Hom P B) (g' : Hom P A) : Set (m ‚äî n) where
    field
      commuting : f ‚àò g' ‚â° g ‚àò f'
      universal : {Q : Obj} {f'' : Hom Q B} {g'' : Hom Q A} (sq : CommutingSquare g'' f f'' g) -> UniquePullbackSquareReduction sq (commutingSquare commuting)

    square : CommutingSquare g' f f' g
    square = commutingSquare commuting

  record PullbackOf {C A B : Obj} (f : Hom A C) (g : Hom B C) : Set (n ‚äî m) where
    field
      cone : PullingBack f g
      universal : (pb‚ÇÇ : PullingBack f g) -> UniquePullingBackReduction pb‚ÇÇ cone

    P = PullingBack.P cone
    f' = PullingBack.f' cone
    g' = PullingBack.g' cone
    comm = PullingBack.comm cone

    reduceCone : (pb : PullingBack f g) -> PullingBackReduction pb cone
    reduceCone pb = reduction where open UniquePullingBackReduction (universal pb)

    proveId : (red : PullingBackReduction cone cone) -> PullingBackReduction.u red ‚â° id
    proveId red =
      let
        open UniquePullingBackReduction (universal cone)
        u_id = unique (identityPullingBackReduction cone)
        u_red = unique red
      in u_red =>>= flipEq u_id


  pullback_uniqueness : {C A B : Obj} {f : Hom A C} {g : Hom B C} (p1 p2 : PullbackOf f g) -> Œ£ (Hom (PullbackOf.P p1) (PullbackOf.P p2)) Iso
  pullback_uniqueness p1 p2 =
    let
      open PullbackOf p1 renaming (cone to pb1 ; reduceCone to reduce1 ; proveId to proveId1)
      open PullbackOf p2 renaming (cone to pb2 ; reduceCone to reduce2 ; proveId to proveId2)

      r12 : PullingBackReduction pb1 pb2
      r12 = reduce2 pb1

      r21 : PullingBackReduction pb2 pb1
      r21 = reduce1 pb2

      u12 = PullingBackReduction.u r12
      u21 = PullingBackReduction.u r21
    in u12 , record
               { inverse = u21
               ; leftInverse  = proveId1 (composePullingBackReductions r21 r12)
               ; rightInverse = proveId2 (composePullingBackReductions r12 r21)
               }
               
  pullback_of_mono_is_mono : {A B C : Obj} {f : Hom A C} {g : Hom B C} -> (p : PullbackOf f g) -> Mono f -> Mono (PullbackOf.f' p)
  pullback_of_mono_is_mono {f = f} {g = g} p m =
    let
      open PullbackOf p
      fg'=gf' = comm
    in mono Œª {X} {Œ±} {Œ≤} f'Œ±=f'Œ≤ ->
      let
        gf'Œ±=gf'Œ≤ = (g ‚àò_) $= f'Œ±=f'Œ≤
        fg'Œ±=gf'Œ≤ = flipEq assoc =>>= ((_‚àò Œ±) $= fg'=gf') =>>=  assoc =>>= gf'Œ±=gf'Œ≤
        fg'Œ±=fg'Œ≤ = fg'Œ±=gf'Œ≤ =>>= flipEq assoc =>>= flipEq ((_‚àò Œ≤) $= fg'=gf') =>>= assoc

        p2 : PullingBack f g
        p2 = record { P = X ; f' = f' ‚àò Œ≤ ; g' = g' ‚àò Œ± ; comm = fg'Œ±=gf'Œ≤ }

        Œ±r : PullingBackReduction p2 cone
        Œ±r = record { u = Œ± ; ev‚ÇÅ = f'Œ±=f'Œ≤ ; ev‚ÇÇ = refl }

        Œ≤r : PullingBackReduction p2 cone
        Œ≤r = record { u = Œ≤ ; ev‚ÇÅ = refl ; ev‚ÇÇ = flipEq (Mono.elimL m  fg'Œ±=fg'Œ≤) }

        open UniquePullingBackReduction (universal p2)
        Œ±u = unique Œ±r
        Œ≤u = unique Œ≤r
      in Œ±u =>>= flipEq Œ≤u

  --
  --   Q ---------‚ïÆ
  --   | ‚Üò        v
  --   |  A ‚Üí B ‚Üí C
  --   |  ‚Üì   ‚Üì   ‚Üì
  --   ‚ï∞> D ‚Üí E ‚Üí F
  --
  pullback_pasting : {A B C D E F : Obj} {ab : Hom A B} {bc : Hom B C} {ad : Hom A D} {be : Hom B E} {cf : Hom C F} {de : Hom D E} {ef : Hom E F} ->
                     Pullback cf ef be bc -> Pullback be de ad ab -> Pullback cf (ef ‚àò de) ad (bc ‚àò ab)
  pullback_pasting {A} {B} {C} {D} {E} {F} {ab} {bc} {ad} {be} {cf} {de} {ef} p1 p2 =
    let
      open Pullback p1 renaming (commuting to cf‚àòbc=ef‚àòbe ; universal to universal1 ; square to square1)
      open Pullback p2 renaming (commuting to be‚àòab=de‚àòad ; universal to universal2 ; square to square2)
    in record
         { commuting = flipEq assoc =>>= ((_‚àò ab) $= cf‚àòbc=ef‚àòbe) =>>= assoc =>>= ((ef ‚àò_) $= be‚àòab=de‚àòad) =>>= flipEq assoc
         ; universal = Œª {Q} {qd} {qc} sq ‚Üí
             let
               open CommutingSquare sq renaming (evidence to cf‚àòqc=ef‚àòde‚àòqd)

               sq‚ÇÅ : CommutingSquare qc cf (de ‚àò qd) ef
               sq‚ÇÅ = commutingSquare (cf‚àòqc=ef‚àòde‚àòqd =>>= assoc)

               sq1_b : UniquePullbackSquareReduction sq‚ÇÅ square1
               sq1_b = universal1 sq‚ÇÅ

               open UniquePullbackSquareReduction sq1_b renaming (u to qb ; ev‚ÇÅ to qc=bc‚àòqb ; ev‚ÇÇ to de‚àòqd=be‚àòqb ; unique to unique1)

               sq‚ÇÇ : CommutingSquare qb be qd de
               sq‚ÇÇ = commutingSquare (flipEq de‚àòqd=be‚àòqb)

               sq2_a : UniquePullbackSquareReduction sq‚ÇÇ square2
               sq2_a = universal2 sq‚ÇÇ

               open UniquePullbackSquareReduction sq2_a renaming (u to qa ; ev‚ÇÅ to qb=ab‚àòqa ; ev‚ÇÇ to qd=ad‚àòqa ; unique to unique2)
             in record
                  { reduction = record
                      { u = qa
                      ; ev‚ÇÅ = qc=bc‚àòqb =>>= ((bc ‚àò_) $= qb=ab‚àòqa) =>>= flipEq assoc
                      ; ev‚ÇÇ = qd=ad‚àòqa
                      }
                  ; unique = Œª red ‚Üí
                    let
                      open PullbackSquareReduction red renaming (u to qa' ; ev‚ÇÅ to qc=bc‚àòab‚àòqa' ; ev‚ÇÇ to qd=ad‚àòqa')
                      red‚ÇÅ : PullbackSquareReduction sq‚ÇÅ square1
                      red‚ÇÅ = record
                        { u = ab ‚àò qa'
                        ; ev‚ÇÅ =  qc=bc‚àòab‚àòqa' =>>= assoc
                        ; ev‚ÇÇ = ((de ‚àò_) $= qd=ad‚àòqa') =>>= flipEq assoc =>>= ((_‚àò qa') $= (flipEq be‚àòab=de‚àòad)) =>>= assoc
                        }
                      ab‚àòqa'=qb = unique1 red‚ÇÅ

                      red‚ÇÇ : PullbackSquareReduction sq‚ÇÇ square2
                      red‚ÇÇ = record
                        { u = qa'
                        ; ev‚ÇÅ = flipEq ab‚àòqa'=qb
                        ; ev‚ÇÇ = qd=ad‚àòqa'
                        }
                      qa'=qa = unique2 red‚ÇÇ
                    in qa'=qa
                  }
         }

  open import products ùíû
  open import equalizers ùíû

  -- Construction of pullbacks from products and equalizers
  pullback_construction : ((A B : Obj) -> Product A B) ->
                          ({A B : Obj} -> (f g : Hom A B) -> Equalizer f g) ->
                          {A‚ÇÅ A‚ÇÇ C : Obj} -> (f : Hom A‚ÇÅ C) -> (g : Hom A‚ÇÇ C) -> PullbackOf f g
  pullback_construction prod equ {A‚ÇÅ} {A‚ÇÇ} {C} f g =
    let
      open Product (prod A‚ÇÅ A‚ÇÇ) renaming (P to A‚ÇÅxA‚ÇÇ ; universal to prodUniversal)
      open Equalizer (equ (f ‚àò œÄ‚ÇÅ) (g ‚àò œÄ‚ÇÇ)) renaming (E to P ; comm to f‚àòœÄ‚ÇÅ‚àòe=g‚àòœÄ‚ÇÇ‚àòe ; universal to equUniversal)
    in record
         { cone = record
             { P = P
             ; f' = œÄ‚ÇÇ ‚àò e
             ; g' = œÄ‚ÇÅ ‚àò e
             ; comm = flipEq assoc =>>= f‚àòœÄ‚ÇÅ‚àòe=g‚àòœÄ‚ÇÇ‚àòe =>>= assoc
             }
         ; universal = Œª pb‚ÇÇ ‚Üí
           let
             open PullingBack pb‚ÇÇ renaming (P to P‚ÇÇ ; f' to f' ; g' to g' ; comm to fg'=gf')
             open UniqueSpanReduction (prodUniversal (span g' f')) renaming (u to u‚ÇÄ ; ev‚ÇÅ to œÄ‚ÇÅu‚ÇÄ=g' ; ev‚ÇÇ to œÄ‚ÇÇu‚ÇÄ=f' ; unique to prodUnique)

             fœÄ‚ÇÅu‚ÇÄ=gœÄ‚ÇÇu‚ÇÄ : ((f ‚àò œÄ‚ÇÅ) ‚àò u‚ÇÄ) ‚â° ((g ‚àò œÄ‚ÇÇ) ‚àò u‚ÇÄ)
             fœÄ‚ÇÅu‚ÇÄ=gœÄ‚ÇÇu‚ÇÄ = assoc =>>= ((f ‚àò_) $= œÄ‚ÇÅu‚ÇÄ=g') =>>= fg'=gf' =>>= ((g ‚àò_) $= (flipEq œÄ‚ÇÇu‚ÇÄ=f')) =>>= (flipEq assoc)
             open UniqueEqualizingReduction (equUniversal (equalizing P‚ÇÇ u‚ÇÄ fœÄ‚ÇÅu‚ÇÄ=gœÄ‚ÇÇu‚ÇÄ)) renaming (u to u ; ev to eu=u‚ÇÄ ; unique to equUnique)
           in record
                { reduction = record
                    { u = u
                    ; ev‚ÇÅ = assoc =>>= ((œÄ‚ÇÇ ‚àò_) $= eu=u‚ÇÄ) =>>= œÄ‚ÇÇu‚ÇÄ=f'
                    ; ev‚ÇÇ = assoc =>>= ((œÄ‚ÇÅ ‚àò_) $= eu=u‚ÇÄ) =>>= œÄ‚ÇÅu‚ÇÄ=g'
                    }
                ; unique = Œª red‚ÇÇ ‚Üí
                    let
                      open PullingBackReduction red‚ÇÇ renaming (u to u‚ÇÇ ; ev‚ÇÅ to œÄ‚ÇÇeu‚ÇÇ=f' ; ev‚ÇÇ to œÄ‚ÇÅeu‚ÇÇ=g')

                      eu‚ÇÇ=u‚ÇÄ = prodUnique (record { u = e ‚àò u‚ÇÇ ; ev‚ÇÅ = flipEq assoc =>>= œÄ‚ÇÅeu‚ÇÇ=g' ; ev‚ÇÇ = flipEq assoc =>>= œÄ‚ÇÇeu‚ÇÇ=f' })
                      u‚ÇÇ=u = equUnique (record { u = u‚ÇÇ ; ev =  eu‚ÇÇ=u‚ÇÄ })
                    in u‚ÇÇ=u
                }
         }

