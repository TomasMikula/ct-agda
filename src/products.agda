open import Agda.Primitive
open import Data.Product
open import Prelude
open import category

module products {n m : Level} (ùíû : Category n m) where
  open Category ùíû
  open import morphisms ùíû
  open import patterns ùíû

  record Product (A B : Obj) : Set (n ‚äî m) where
    field
      P : Obj
      œÄ‚ÇÅ : Hom P A
      œÄ‚ÇÇ : Hom P B
      universal : {Q : Obj} (q‚ÇÅ : Hom Q A) (q‚ÇÇ : Hom Q B) -> UniqueSpanReduction q‚ÇÅ q‚ÇÇ œÄ‚ÇÅ œÄ‚ÇÇ

    reduceCone : {Q : Obj} (q‚ÇÅ : Hom Q A) (q‚ÇÇ : Hom Q B) -> SpanReduction q‚ÇÅ q‚ÇÇ œÄ‚ÇÅ œÄ‚ÇÇ
    reduceCone q‚ÇÅ q‚ÇÇ = UniqueSpanReduction.reduction (universal q‚ÇÅ q‚ÇÇ)

    proveId : (red : SpanReduction œÄ‚ÇÅ œÄ‚ÇÇ œÄ‚ÇÅ œÄ‚ÇÇ) -> SpanReduction.u red ‚â° id
    proveId red =
      let
        open UniqueSpanReduction (universal œÄ‚ÇÅ œÄ‚ÇÇ)
        u_id  = unique (identitySpanReduction œÄ‚ÇÅ œÄ‚ÇÇ)
        u_red = unique red
      in u_red =>>= flipEq u_id

  product_uniqueness : {A B : Obj} (p q : Product A B) -> Œ£ (Hom (Product.P p) (Product.P q)) Iso
  product_uniqueness p q =
    let
      open Product p renaming (œÄ‚ÇÅ to p‚ÇÅ ; œÄ‚ÇÇ to p‚ÇÇ ; reduceCone to reduceCone-p ; proveId to proveId-p)
      open Product q renaming (œÄ‚ÇÅ to q‚ÇÅ ; œÄ‚ÇÇ to q‚ÇÇ ; reduceCone to reduceCone-q ; proveId to proveId-q)

      p-q : SpanReduction p‚ÇÅ p‚ÇÇ q‚ÇÅ q‚ÇÇ
      p-q = reduceCone-q p‚ÇÅ p‚ÇÇ

      q-p : SpanReduction q‚ÇÅ q‚ÇÇ p‚ÇÅ p‚ÇÇ
      q-p = reduceCone-p q‚ÇÅ q‚ÇÇ

      pq = SpanReduction.u p-q
      qp = SpanReduction.u q-p

    in pq , iso qp (proveId-p (composeSpanReductions q-p p-q)) (proveId-q (composeSpanReductions p-q q-p))
